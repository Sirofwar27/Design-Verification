//Deep copy
class first;
  int data=12;
  function first copy();
    copy=new();
    copy.data=data;
  endfunction 
  
endclass

class second;
  int data2=24;
  first f;
  function new();
    f=new();
  endfunction
  function second copy();
    copy=new();
    copy.data2=data2;
    copy.f=f.copy;
  endfunction
  
endclass

module tb;
  second m,n;
  initial begin
    m=new();
    n=new();
    m.data2=45;
    n=m.copy();
    $display("%0p--%0p",m.data2,n.data2);
    n.data2=10;
    $display("%0p--%0p",m.data2,n.data2);// 45,10. from which we copy that will not change. orginal remains same for data type.
    n.f.data=100;
    $display("%0p--%0p",m.f.data,n.f.data);//12,100--exactly this is deep, every copy is independent, changing one doesnt affect other.
  end
endmodule


//2
module tb;
    class Header;
        int id;
        function new(int id);
            this.id = id;
        endfunction
    endclass

    class Packet;
        int addr, data;
        Header hdr;

        function new(int addr, int data, int id);
            this.addr = addr;
            this.data = data;
            this.hdr = new(id);
        endfunction

        // Custom deep copy function
        function void copy(Packet p);
            this.addr = p.addr;
            this.data = p.data;
            this.hdr = new(p.hdr.id);  // Create a new Header object
        endfunction

        function void display(string name);
            $display("[%s] addr=0x%0h data=0x%0h id=%0d", name, addr, data, hdr.id);
        endfunction
    endclass

    initial begin
        Packet p1, p2;

        // Create p1
        p1 = new(32'hfacecafe, 32'h12345678, 26);
        p1.display("p1");

        // Create p2 and deep copy p1 into p2
        p2 = new(0, 0, 0);  // Initialize p2 with dummy values
        p2.copy(p1);
        p2.display("p2");

        // Modify p1
        p1.addr = 32'habcd_ef12;
        p1.hdr.id = 17;
        p1.display("p1");

        // Observe p2
        p2.display("p2");
    end
endmodule
