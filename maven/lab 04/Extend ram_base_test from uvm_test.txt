// Extend ram_base_test from uvm_test;
class ram_base_test extends uvm_test;

   // Factory Registration
	
`uvm_component_utils(ram_base_test);
  
    // Declare the ram_env and ram_wr_agent_config handles as ram_envh and m_ram_cfg respectively
    ram_wr_agent_config m_ram_cfg;
    ram_env ram_envh;

	//------------------------------------------
	// METHODS
	//------------------------------------------

	// Standard UVM Methods:
	extern function new(string name = "ram_base_test" , uvm_component parent);
	extern function void build_phase(uvm_phase phase);
	
 endclass
//-----------------  constructor new method  -------------------//
// Define Constructor new() function
function ram_base_test::new(string name, uvm_component parent);
super.new(name,parent);
endfunction


//-----------------  build() phase method  -------------------//
            
function void ram_base_test::build_phase(uvm_phase phase);
	// Create the instance of config_object
    
	// set is_active to UVM_ACTIVE 
   
    // set the config object into UVM config DB  
	
	// create the instance for env

super.build_phase(phase);
m_ram_cfg=ram_wr_agent_config::type_id::create("m_ram_cfg");


m_ram_cfg.is_active=UVM_ACTIVE;
uvm_config_db #(ram_wr_agent_config)::set(this, "*", "ram_wr_agent_config", m_ram_cfg);

ram_envh=ram_env::type_id::create("ram_env",this);



endfunction

//------------------------------------------
// CLASS DESCRIPTION
//------------------------------------------

// Extend ram_random_test from ram_base_test;
class ram_random_test extends ram_base_test;

  
   // Factory Registration
  `uvm_component_utils(ram_random_test)

   // Declare the handle for  ram_rand_wr_xtns sequence
   ram_rand_wr_xtns wr_seq;
	//------------------------------------------
	// METHODS
	//------------------------------------------
    
	// Standard UVM Methods:
 	extern function new(string name = "ram_random_test" , uvm_component parent);
	extern function void build_phase(uvm_phase phase);
    extern function void end_of_elaboration_phase(uvm_phase phase);
	extern task run_phase(uvm_phase phase);
endclass

//-----------------  constructor new method  -------------------//

 // Define Constructor new() function
function ram_random_test::new(string name="ram_random_test",uvm_component parent);
super.new(name,parent);
endfunction


//-----------------  build() phase method  -------------------//
 // In build phase call build phase of ram_base_test           
function void ram_random_test::build_phase(uvm_phase phase);
super.build_phase(phase);
endfunction


//-----------------  end_of_elobration() phase method  -------------------//
// print topology             
function void ram_random_test::end_of_elaboration_phase(uvm_phase phase);
`uvm_info("TEST","Printing topology...",UVM_LOW)
uvm_top.print_topology();
endfunction

//-----------------  run() phase method  -------------------//
task ram_random_test::run_phase(uvm_phase phase);
	//raise objection
   
	//create instance for sequence

	//start the sequence on write agent sequencer 
  
	//drop objection
  
phase.raise_objection(this);
wr_seq=ram_rand_wr_xtns::type_id::create("wr_seq");
wr_seq.start(ram_envh.wr_agnth.seqrh);
phase.drop_objection(this);

endtask   