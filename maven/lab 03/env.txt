---------------------------------------


// Extend ram_env from uvm_env
class ram_env extends uvm_env;

   // Factory Registration
	 `uvm_component_utils(ram_env)

	// Declare the ram_wr_agent handle
   ram_wr_agent agt;


	//------------------------------------------
	// METHODS
	//------------------------------------------

	// Standard UVM Methods:
	extern function new(string name = "ram_env",uvm_component parent);
	extern function void build_phase(uvm_phase phase);
	extern function void connect_phase(uvm_phase phase);
	extern function void end_of_elaboration_phase(uvm_phase phase);
	extern function void start_of_simulation_phase(uvm_phase phase);
	extern task run_phase(uvm_phase phase);
	extern function void extract_phase(uvm_phase phase);
	extern function void check_phase(uvm_phase phase);
	extern function void report_phase(uvm_phase phase);

endclass
	
//-----------------  constructor new method  -------------------//

function ram_env::new(string name = "ram_env", uvm_component parent);
   super.new(name, parent);
endfunction
       
  
// Add UVM phases
// NOTE : Call super.*_phase() in every phase method ,* indicates build,connect,etc  
//        Print using `uvm_info("RAM_ENV","This is build phase",UVM_LOW)  in all the phases 
   

 //-----------------  Add UVM build() phase   -------------------//
//Create the instance of ram_wr_agent in build phase
   function void ram_env::build_phase(uvm_phase phase);
   super.build_phase(phase);
   `uvm_info("RAM_ENV", "This is build phase", UVM_LOW)

   // Create instance of agent
   agt = ram_wr_agent::type_id::create("agt", this);
endfunction 
	
//-----------------  Add UVM connect() phase   -------------------//
function void ram_env::connect_phase(uvm_phase phase);
   super.connect_phase(phase);
   `uvm_info("RAM_ENV", "This is connect phase", UVM_LOW)
endfunction 

//-----------------  Add UVM end_of_elaboration() phase   -------------------//
function void ram_env::end_of_elaboration_phase(uvm_phase phase);
   super.end_of_elaboration_phase(phase);
   `uvm_info("RAM_ENV", "This is end_of_elaboration phase", UVM_LOW)
endfunction 

   
//-----------------  Add UVM start_of_simulation() phase   -------------------//

function void ram_env::start_of_simulation_phase(uvm_phase phase);
   super.start_of_simulation_phase(phase);
   `uvm_info("RAM_ENV", "This is start_of_simulation phase", UVM_LOW)
endfunction

//-----------------  Add UVM run() phase   -------------------//
// Raise and drop objections  
// With in raising ans dropping the objections add 100 delay in the run phase before printing

task ram_env::run_phase(uvm_phase phase);
   super.run_phase(phase);
   `uvm_info("RAM_ENV", "This is run phase: Raising objection", UVM_LOW)

   phase.raise_objection(this);
   #100; // Delay for 100 time units
   `uvm_info("RAM_ENV", "100 time units delay completed in run phase", UVM_LOW)
   phase.drop_objection(this);

   `uvm_info("RAM_ENV", "This is run phase: Dropped objection", UVM_LOW)
endtask 


//-----------------  Add UVM extract() phase   -------------------//
function void ram_env::extract_phase(uvm_phase phase);
   super.extract_phase(phase);
   `uvm_info("RAM_ENV", "This is extract phase", UVM_LOW)
endfunction


   
//-----------------  Add UVM check() phase   -------------------//

function void ram_env::check_phase(uvm_phase phase);
   super.check_phase(phase);
   `uvm_info("RAM_ENV", "This is check phase", UVM_LOW)
endfunction


//-----------------  Add UVM report() phase   -------------------//

function void ram_env::report_phase(uvm_phase phase);
   super.report_phase(phase);
   `uvm_info("RAM_ENV", "This is report phase", UVM_LOW)
endfunction